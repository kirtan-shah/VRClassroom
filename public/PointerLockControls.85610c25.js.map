{"version":3,"sources":["javascript/PointerLockControls.js"],"names":["THREE","PointerLockControls","camera","domElement","undefined","console","warn","document","body","isLocked","scope","direction","changeEvent","type","lockEvent","unlockEvent","euler","Euler","PI_2","Math","PI","vec","Vector3","onMouseMove","event","movementX","mozMovementX","webkitMovementX","movementY","mozMovementY","webkitMovementY","setFromQuaternion","quaternion","y","x","max","min","setFromEuler","dispatchEvent","onPointerlockChange","pointerLockElement","onPointerlockError","error","connect","addEventListener","disconnect","removeEventListener","dispose","getObject","getDirection","v","copy","applyQuaternion","moveForward","distance","setFromMatrixColumn","matrix","crossVectors","up","position","addScaledVector","moveRight","lock","requestPointerLock","unlock","exitPointerLock","prototype","Object","create","EventDispatcher","constructor"],"mappings":";AAKAA,MAAMC,oBAAsB,SAAWC,EAAQC,QAE1BC,IAAfD,IAEJE,QAAQC,KAAM,kFACdH,EAAaI,SAASC,MAIlBL,KAAAA,WAAaA,EACbM,KAAAA,UAAW,EAMZC,IAsFCC,EAtFDD,EAAQ,KAERE,EAAc,CAAEC,KAAM,UACtBC,EAAY,CAAED,KAAM,QACpBE,EAAc,CAAEF,KAAM,UAEtBG,EAAQ,IAAIhB,MAAMiB,MAAO,EAAG,EAAG,EAAG,OAElCC,EAAOC,KAAKC,GAAK,EAEjBC,EAAM,IAAIrB,MAAMsB,QAEXC,SAAAA,EAAaC,GAEhBd,IAAmB,IAAnBA,EAAMD,SAANC,CAEDe,IAAAA,EAAYD,EAAMC,WAAaD,EAAME,cAAgBF,EAAMG,iBAAmB,EAC9EC,EAAYJ,EAAMI,WAAaJ,EAAMK,cAAgBL,EAAMM,iBAAmB,EAElFd,EAAMe,kBAAmB7B,EAAO8B,YAEhChB,EAAMiB,GAAiB,KAAZR,EACXT,EAAMkB,GAAiB,KAAZN,EAEXZ,EAAMkB,EAAIf,KAAKgB,KAAOjB,EAAMC,KAAKiB,IAAKlB,EAAMF,EAAMkB,IAElDhC,EAAO8B,WAAWK,aAAcrB,GAEhCN,EAAM4B,cAAe1B,IAIb2B,SAAAA,IAEHhC,SAASiC,qBAAuB9B,EAAMP,YAE1CO,EAAM4B,cAAexB,GAErBJ,EAAMD,UAAW,IAIjBC,EAAM4B,cAAevB,GAErBL,EAAMD,UAAW,GAMVgC,SAAAA,IAERpC,QAAQqC,MAAO,6DAIXC,KAAAA,QAAU,WAEdpC,SAASqC,iBAAkB,YAAarB,GAAa,GACrDhB,SAASqC,iBAAkB,oBAAqBL,GAAqB,GACrEhC,SAASqC,iBAAkB,mBAAoBH,GAAoB,IAI/DI,KAAAA,WAAa,WAEjBtC,SAASuC,oBAAqB,YAAavB,GAAa,GACxDhB,SAASuC,oBAAqB,oBAAqBP,GAAqB,GACxEhC,SAASuC,oBAAqB,mBAAoBL,GAAoB,IAIlEM,KAAAA,QAAU,WAETF,KAAAA,cAIDG,KAAAA,UAAY,WAET9C,OAAAA,GAIH+C,KAAAA,cAEAtC,EAAY,IAAIX,MAAMsB,QAAS,EAAG,GAAK,GAEpC,SAAW4B,GAEVA,OAAAA,EAAEC,KAAMxC,GAAYyC,gBAAiBlD,EAAO8B,cAMhDqB,KAAAA,YAAc,SAAWC,GAK7BjC,EAAIkC,oBAAqBrD,EAAOsD,OAAQ,GAExCnC,EAAIoC,aAAcvD,EAAOwD,GAAIrC,GAE7BnB,EAAOyD,SAASC,gBAAiBvC,EAAKiC,IAIlCO,KAAAA,UAAY,SAAWP,GAE3BjC,EAAIkC,oBAAqBrD,EAAOsD,OAAQ,GAExCtD,EAAOyD,SAASC,gBAAiBvC,EAAKiC,IAIlCQ,KAAAA,KAAO,WAEN3D,KAAAA,WAAW4D,sBAIZC,KAAAA,OAAS,WAEbzD,SAAS0D,mBAILtB,KAAAA,WAIN3C,MAAMC,oBAAoBiE,UAAYC,OAAOC,OAAQpE,MAAMqE,gBAAgBH,WAC3ElE,MAAMC,oBAAoBiE,UAAUI,YAActE,MAAMC","file":"PointerLockControls.85610c25.js","sourceRoot":"../front","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.PointerLockControls = function ( camera, domElement ) {\n\n\tif ( domElement === undefined ) {\n\n\t\tconsole.warn( 'THREE.PointerLockControls: The second parameter \"domElement\" is now mandatory.' );\n\t\tdomElement = document.body;\n\n\t}\n\n\tthis.domElement = domElement;\n\tthis.isLocked = false;\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar lockEvent = { type: 'lock' };\n\tvar unlockEvent = { type: 'unlock' };\n\n\tvar euler = new THREE.Euler( 0, 0, 0, 'YXZ' );\n\n\tvar PI_2 = Math.PI / 2;\n\n\tvar vec = new THREE.Vector3();\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.isLocked === false ) return;\n\n\t\tvar movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n\t\tvar movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n\n\t\teuler.setFromQuaternion( camera.quaternion );\n\n\t\teuler.y -= movementX * 0.002;\n\t\teuler.x -= movementY * 0.002;\n\n\t\teuler.x = Math.max( - PI_2, Math.min( PI_2, euler.x ) );\n\n\t\tcamera.quaternion.setFromEuler( euler );\n\n\t\tscope.dispatchEvent( changeEvent );\n\n\t}\n\n\tfunction onPointerlockChange() {\n\n\t\tif ( document.pointerLockElement === scope.domElement ) {\n\n\t\t\tscope.dispatchEvent( lockEvent );\n\n\t\t\tscope.isLocked = true;\n\n\t\t} else {\n\n\t\t\tscope.dispatchEvent( unlockEvent );\n\n\t\t\tscope.isLocked = false;\n\n\t\t}\n\n\t}\n\n\tfunction onPointerlockError() {\n\n\t\tconsole.error( 'THREE.PointerLockControls: Unable to use Pointer Lock API' );\n\n\t}\n\n\tthis.connect = function () {\n\n\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.addEventListener( 'pointerlockchange', onPointerlockChange, false );\n\t\tdocument.addEventListener( 'pointerlockerror', onPointerlockError, false );\n\n\t};\n\n\tthis.disconnect = function () {\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'pointerlockchange', onPointerlockChange, false );\n\t\tdocument.removeEventListener( 'pointerlockerror', onPointerlockError, false );\n\n\t};\n\n\tthis.dispose = function () {\n\n\t\tthis.disconnect();\n\n\t};\n\n\tthis.getObject = function () { // retaining this method for backward compatibility\n\n\t\treturn camera;\n\n\t};\n\n\tthis.getDirection = function () {\n\n\t\tvar direction = new THREE.Vector3( 0, 0, - 1 );\n\n\t\treturn function ( v ) {\n\n\t\t\treturn v.copy( direction ).applyQuaternion( camera.quaternion );\n\n\t\t};\n\n\t}();\n\n\tthis.moveForward = function ( distance ) {\n\n\t\t// move forward parallel to the xz-plane\n\t\t// assumes camera.up is y-up\n\n\t\tvec.setFromMatrixColumn( camera.matrix, 0 );\n\n\t\tvec.crossVectors( camera.up, vec );\n\n\t\tcamera.position.addScaledVector( vec, distance );\n\n\t};\n\n\tthis.moveRight = function ( distance ) {\n\n\t\tvec.setFromMatrixColumn( camera.matrix, 0 );\n\n\t\tcamera.position.addScaledVector( vec, distance );\n\n\t};\n\n\tthis.lock = function () {\n\n\t\tthis.domElement.requestPointerLock();\n\n\t};\n\n\tthis.unlock = function () {\n\n\t\tdocument.exitPointerLock();\n\n\t};\n\n\tthis.connect();\n\n};\n\nTHREE.PointerLockControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.PointerLockControls.prototype.constructor = THREE.PointerLockControls;\n"]}